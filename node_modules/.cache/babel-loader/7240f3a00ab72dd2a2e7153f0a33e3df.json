{"ast":null,"code":"export const getExclusionsFromPreviousSteps = (configuration, step) => {\n  const types = [];\n  let exclusionList = [];\n\n  for (var i = 0; i <= step; i++) {\n    let configurationType = Object.values(configuration)[i];\n    console.log(configurationType);\n\n    if (Array.isArray(configurationType)) {\n      configurationType.forEach(configAttribute => [...exclusionList, ...configAttribute.exclusions]);\n    } else {\n      exclusionList = [...exclusionList, ...configurationType.exclusions];\n    }\n  }\n\n  console.log(exclusionList);\n  return exclusionList;\n};\nexport const getCategories = configurationAttributes => {\n  let categories = new Set();\n  configurationAttributes.forEach(element => categories.add(element.category));\n  return [...categories];\n};\nexport const getConfigurationAsList = configuration => {\n  let config = [];\n  Object.values(configuration).map(attr => {\n    if (Array.isArray(attr)) {\n      attr.map(innerAttr => config = [...config, innerAttr]);\n    } else {\n      config = [...config, attr];\n    }\n  });\n  return config;\n};","map":{"version":3,"names":["getExclusionsFromPreviousSteps","configuration","step","types","exclusionList","i","configurationType","Object","values","console","log","Array","isArray","forEach","configAttribute","exclusions","getCategories","configurationAttributes","categories","Set","element","add","category","getConfigurationAsList","config","map","attr","innerAttr"],"sources":["/Users/vw7u456/projects/abschluss2/g3t6_zwischenpruefung_jahr2_gruppe07/configurator-frontend/src/util/util.js"],"sourcesContent":["\n\n\nexport const getExclusionsFromPreviousSteps = (configuration, step) => {\n    const types = []\n    let exclusionList = [];\n    for (var i = 0; i <= step; i++) {\n        let configurationType = Object.values(configuration)[i]\n        console.log(configurationType)\n        if (Array.isArray(configurationType)) {\n            configurationType.forEach(configAttribute => [...exclusionList, ...configAttribute.exclusions])\n        } else {\n            exclusionList = [...exclusionList, ...configurationType.exclusions]\n        }\n    }\n    console.log(exclusionList)\n    return exclusionList;\n}\n\nexport const getCategories = (configurationAttributes) => {\n    let categories = new Set();\n    configurationAttributes.forEach(element => categories.add(element.category))\n    return [...categories]\n}\n\nexport const getConfigurationAsList = (configuration) => {\n    let config = [];\n    Object.values(configuration).map(attr => {\n        if (Array.isArray(attr)) {\n            attr.map(innerAttr => config = [...config, innerAttr])\n        } else {\n            config = [...config, attr]\n        }\n    })\n    return config;\n}"],"mappings":"AAGA,OAAO,MAAMA,8BAA8B,GAAG,CAACC,aAAD,EAAgBC,IAAhB,KAAyB;EACnE,MAAMC,KAAK,GAAG,EAAd;EACA,IAAIC,aAAa,GAAG,EAApB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,IAArB,EAA2BG,CAAC,EAA5B,EAAgC;IAC5B,IAAIC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcP,aAAd,EAA6BI,CAA7B,CAAxB;IACAI,OAAO,CAACC,GAAR,CAAYJ,iBAAZ;;IACA,IAAIK,KAAK,CAACC,OAAN,CAAcN,iBAAd,CAAJ,EAAsC;MAClCA,iBAAiB,CAACO,OAAlB,CAA0BC,eAAe,IAAI,CAAC,GAAGV,aAAJ,EAAmB,GAAGU,eAAe,CAACC,UAAtC,CAA7C;IACH,CAFD,MAEO;MACHX,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmB,GAAGE,iBAAiB,CAACS,UAAxC,CAAhB;IACH;EACJ;;EACDN,OAAO,CAACC,GAAR,CAAYN,aAAZ;EACA,OAAOA,aAAP;AACH,CAdM;AAgBP,OAAO,MAAMY,aAAa,GAAIC,uBAAD,IAA6B;EACtD,IAAIC,UAAU,GAAG,IAAIC,GAAJ,EAAjB;EACAF,uBAAuB,CAACJ,OAAxB,CAAgCO,OAAO,IAAIF,UAAU,CAACG,GAAX,CAAeD,OAAO,CAACE,QAAvB,CAA3C;EACA,OAAO,CAAC,GAAGJ,UAAJ,CAAP;AACH,CAJM;AAMP,OAAO,MAAMK,sBAAsB,GAAItB,aAAD,IAAmB;EACrD,IAAIuB,MAAM,GAAG,EAAb;EACAjB,MAAM,CAACC,MAAP,CAAcP,aAAd,EAA6BwB,GAA7B,CAAiCC,IAAI,IAAI;IACrC,IAAIf,KAAK,CAACC,OAAN,CAAcc,IAAd,CAAJ,EAAyB;MACrBA,IAAI,CAACD,GAAL,CAASE,SAAS,IAAIH,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYG,SAAZ,CAA/B;IACH,CAFD,MAEO;MACHH,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYE,IAAZ,CAAT;IACH;EACJ,CAND;EAOA,OAAOF,MAAP;AACH,CAVM"},"metadata":{},"sourceType":"module"}