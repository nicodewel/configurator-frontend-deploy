{"ast":null,"code":"export const getExclusionsFromPreviousSteps = (configuration, step) => {\n  const types = [];\n  let exclusionList = [];\n\n  for (var i = 0; i < step; i++) {\n    let configurationType = Object.values(configuration)[i];\n\n    if (typeof configurationType === \"object\" && !Array.isArray(configurationType)) {\n      if (configurationType.exclusions) {\n        exclusionList = [...exclusionList, ...configurationType.exclusions];\n      }\n    } else {\n      configurationType.map(configAttribute => exclusionList = [...exclusionList, ...configAttribute.exclusions]);\n    }\n  }\n\n  return exclusionList;\n};\nexport const getCategories = configurationAttributes => {\n  let categories = new Set();\n  configurationAttributes.forEach(element => categories.add(element.category));\n  return [...categories];\n};\nexport const getConfigurationAsList = configuration => {\n  let config = [];\n  Object.values(configuration).map(attr => {\n    if (Array.isArray(attr)) {\n      attr.map(innerAttr => config = [...config, innerAttr]);\n    } else {\n      config = [...config, attr];\n    }\n  });\n  return config;\n};","map":{"version":3,"names":["getExclusionsFromPreviousSteps","configuration","step","types","exclusionList","i","configurationType","Object","values","Array","isArray","exclusions","map","configAttribute","getCategories","configurationAttributes","categories","Set","forEach","element","add","category","getConfigurationAsList","config","attr","innerAttr"],"sources":["/Users/vw7u456/projects/abschluss2/g3t6_zwischenpruefung_jahr2_gruppe07/configurator-frontend/src/util/util.js"],"sourcesContent":["\n\n\nexport const getExclusionsFromPreviousSteps = (configuration, step) => {\n    const types = []\n    let exclusionList = [];\n    for (var i = 0; i < step; i++) {\n        let configurationType = Object.values(configuration)[i]\n\n        if (typeof configurationType === \"object\" && !Array.isArray(configurationType)) {\n            if (configurationType.exclusions) {\n                exclusionList = [...exclusionList, ...configurationType.exclusions]\n            }\n        } else {\n            configurationType.map(configAttribute => exclusionList = [...exclusionList, ...configAttribute.exclusions])\n        }\n    }\n    return exclusionList;\n}\n\nexport const getCategories = (configurationAttributes) => {\n    let categories = new Set();\n    configurationAttributes.forEach(element => categories.add(element.category))\n    return [...categories]\n}\n\nexport const getConfigurationAsList = (configuration) => {\n    let config = [];\n    Object.values(configuration).map(attr => {\n        if (Array.isArray(attr)) {\n            attr.map(innerAttr => config = [...config, innerAttr])\n        } else {\n            config = [...config, attr]\n        }\n    })\n    return config;\n}"],"mappings":"AAGA,OAAO,MAAMA,8BAA8B,GAAG,CAACC,aAAD,EAAgBC,IAAhB,KAAyB;EACnE,MAAMC,KAAK,GAAG,EAAd;EACA,IAAIC,aAAa,GAAG,EAApB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;IAC3B,IAAIC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcP,aAAd,EAA6BI,CAA7B,CAAxB;;IAEA,IAAI,OAAOC,iBAAP,KAA6B,QAA7B,IAAyC,CAACG,KAAK,CAACC,OAAN,CAAcJ,iBAAd,CAA9C,EAAgF;MAC5E,IAAIA,iBAAiB,CAACK,UAAtB,EAAkC;QAC9BP,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmB,GAAGE,iBAAiB,CAACK,UAAxC,CAAhB;MACH;IACJ,CAJD,MAIO;MACHL,iBAAiB,CAACM,GAAlB,CAAsBC,eAAe,IAAIT,aAAa,GAAG,CAAC,GAAGA,aAAJ,EAAmB,GAAGS,eAAe,CAACF,UAAtC,CAAzD;IACH;EACJ;;EACD,OAAOP,aAAP;AACH,CAfM;AAiBP,OAAO,MAAMU,aAAa,GAAIC,uBAAD,IAA6B;EACtD,IAAIC,UAAU,GAAG,IAAIC,GAAJ,EAAjB;EACAF,uBAAuB,CAACG,OAAxB,CAAgCC,OAAO,IAAIH,UAAU,CAACI,GAAX,CAAeD,OAAO,CAACE,QAAvB,CAA3C;EACA,OAAO,CAAC,GAAGL,UAAJ,CAAP;AACH,CAJM;AAMP,OAAO,MAAMM,sBAAsB,GAAIrB,aAAD,IAAmB;EACrD,IAAIsB,MAAM,GAAG,EAAb;EACAhB,MAAM,CAACC,MAAP,CAAcP,aAAd,EAA6BW,GAA7B,CAAiCY,IAAI,IAAI;IACrC,IAAIf,KAAK,CAACC,OAAN,CAAcc,IAAd,CAAJ,EAAyB;MACrBA,IAAI,CAACZ,GAAL,CAASa,SAAS,IAAIF,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYE,SAAZ,CAA/B;IACH,CAFD,MAEO;MACHF,MAAM,GAAG,CAAC,GAAGA,MAAJ,EAAYC,IAAZ,CAAT;IACH;EACJ,CAND;EAOA,OAAOD,MAAP;AACH,CAVM"},"metadata":{},"sourceType":"module"}